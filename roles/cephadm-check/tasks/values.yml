# values.yml

- name: check if defined network interfaces exist
  fail:
    msg: "The interface {{ item }} does not exist"
  failed_when: item not in ansible_facts.interfaces
  vars:
    interfaces:
      - "{{ cephadm_network_interface_cluster }}"
      - "{{ cephadm_network_interface_public }}"
      - "{{ cephadm_network_interface_monitor }}"
      - "{{ cephadm_network_interface_radosgw }}"
  with_items: "{{ interfaces | unique }}"

- name: check if all Cluster Network interfaces are reachable
  command: |-
    ping -c 1 {{ target.address }}
  changed_when: false
  failed_when: ping_result.rc > 0
  register: ping_result
  vars:
    interface: "{{ cephadm_network_interface_cluster }}"
    ipver: "{{ cephadm_network_ip_version }}"
    target: "{{ hostvars[item]['ansible_' + interface][ipver] }}"
  with_items:
    - "{{ cephadm_hosts }}"

- name: check if all Public Network interfaces are reachable
  command: |-
    ping -c 1 {{ target.address }}
  changed_when: false
  failed_when: ping_result.rc > 0
  register: ping_result
  vars:
    interface: "{{ cephadm_network_interface_public }}"
    ipver: "{{ cephadm_network_ip_version }}"
    target: "{{ hostvars[item]['ansible_' + interface][ipver] }}"
  when: interface != cephadm_network_interface_cluster
  with_items:
    - "{{ cephadm_hosts }}"

- name: check if all monitor interfaces are reachable
  command: |-
    ping -c 1 {{ target.address }}
  changed_when: false
  failed_when: ping_result.rc > 0
  register: ping_result
  vars:
    interface: "{{ cephadm_network_interface_monitor }}"
    ipver: "{{ cephadm_network_ip_version }}"
    target: "{{ hostvars[item]['ansible_' + interface][ipver] }}"
  when: interface != cephadm_network_interface_cluster
  with_items:
    - "{{ cephadm_hosts }}"

- name: check if cephadm_osd_devices is populated
  fail:
    msg: >-
      No storage devices defined in cephadm_osd_devices!
  changed_when: false
  failed_when: (cephadm_osd_devices | length) < 1

- name: enumerate storage devices from cephadm_osd_devices
  set_fact:
    cephadm_osd_devices_defined: "{{ defined_devices|unique }}"
  failed_when:
    - cephadm_osd_devices is undefined
    - cephadm_osd_devices | length < 1
  vars:
    devices: "{{ cephadm_osd_devices[item.key] }}"
    defined_devices:
      - "{{ devices['block'] }}"
      - "{{ devices['db']  if devices['db']  is defined else [] }}"
      - "{{ devices['wal'] if devices['wal'] is defined else [] }}"
  with_items: "{{ cephadm_osd_devices | dict2items }}"

# TODO: This might break depending on how Ansible enumerates
# storage devices across Linux distributions.  Doesn't appear that
# RAID/HBA controllers impede us from collecting accurate
# information, but need to _confirm_ that.
- name: enumerate storage devices from ansible_facts['devices']
  set_fact:
    cephadm_osd_devices_found: "{{ found_devices }}"
  vars:
    found_devices: "{{ ansible_facts['devices'].keys() | list }}"

- name: check if defined storage devices are present
  fail:
    msg: "The defined device {{ device }} was not found!"
  changed_when: false
  failed_when: device not in cephadm_osd_devices_found
  vars:
    device: "{{ item.split(':')[0].split('/dev/')[1] }}"
  with_items: "{{ cephadm_osd_devices_defined }}"
